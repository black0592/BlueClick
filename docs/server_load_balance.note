while(1)
{
	epoll_wait等待事件就绪；
		if(error) {
			// 错误处理
		} 
	else if(收到UDP包) {
		if(上线消息) {
			// 加入客户端在线列表中
		}
	else if(心跳请求) {
			// 将在线状态标识重置
		}
	}
	else if(收到TCP包) {
		if(搜索请求) {
			// 新开线程处理子请求
		}
	else if(获取客户端列表请求) {
		// 新开线程处理子请求
		}
	}
	else {
		// 错误处理
	}
}


// 定时器触发检查客户端是否保持在线﻿



负载均衡算法
============

客户端的均衡算法：
客户端请求可用下载客户端列表后，
客户端发出下载请求（客户端地址，资源标识，想要的客户端数量，事件），服务端收到后，服务端返回资源拥有方列表（客户端地址，端口），每过一段时间客户端向服务端报告自己的下载进度（客户端地址，资源标识，已上传量，已下载量，还未下载量）。这些都以资源分片数为单位。

服务端的调度算法：
服务端维护的数据结构
/* 资源下载列表 */
struct downloadnode {
	char md5[33];
	int requestnum;
	int completednum;
	struct downloadinfo *downloadlist;
}

/* 下载统一资源客户端列表 */
struct download_info　{
	char clientip[32];
	int uploaded;
	int downloaded;
	int priority;
	int event;
}
服务端接到下载请求后将其添加到相应的下载队列，开始的时候，下载队列为空，接到第一个下载请求后，新建一个下载队列，将其
